function Write-DeleteFailureLog {
    param(
        [Parameter(Mandatory)] [string]$LogPath,
        [Parameter(Mandatory)] [System.IO.FileSystemInfo]$Item,
        [Parameter(Mandatory)] [System.Exception]$Ex
    )
    $attrs    = $Item.Attributes
    $isDir    = $Item.PSIsContainer
    $isReparse= [bool]($attrs -band [IO.FileAttributes]::ReparsePoint)
    $pathLen  = $Item.FullName.Length
    $ext      = if ($isDir) { '<DIR>' } else { $Item.Extension }
    $size     = if ($isDir) { '-' } else { "{0:N0}" -f $Item.Length }

    # (Optional) quick lock hint for files â€“ uncomment if you want this signal too
    # $lockHint = if (-not $isDir) {
    #     try { $fs = [IO.File]::Open($Item.FullName,'Open','Read','None'); $fs.Dispose(); 'not-locked' }
    #     catch { 'LOCKED' }
    # } else { '-' }

    $line = @(
        "SKIPPED: $($Item.FullName)",
        "  Reason : $($Ex.Message)",
        "  Attr   : $attrs",
        "  Ext    : $ext",
        "  Size   : $size",
        "  PathLen: $pathLen",
        "  Reparse: $isReparse"
        # ,"  Lock   : $lockHint"   # <- include if you uncomment lock check above
    ) -join [Environment]::NewLine

    Add-Content -Path $LogPath -Value $line
}

function Cleanup-MarkedItems {
    param ($path, $now, $dryRun, $logPath, $entry)

    $allItems = Get-ChildItem -Path $path -Force -ErrorAction SilentlyContinue
    foreach ($item in $allItems) {
        if ($item.Name -match '^DELETE_BY_(\d{8})__') {
            $deleteBy = [datetime]::ParseExact($matches[1], 'yyyyMMdd', $null)
            if ($deleteBy -lt $now) {
                if ($dryRun) {
                    Add-Content $logPath "Would delete: $($item.FullName)"
                    if ($item.PSIsContainer) { $entry.deletedFolderCount++ } else { $entry.deletedFileCount++ }
                } else {
                    try {
                        if ($item.PSIsContainer) {
                            Remove-Item -LiteralPath $item.FullName -Recurse -Force -ErrorAction Stop
                            $entry.deletedFolderCount++
                        } else {
                            Remove-Item -LiteralPath $item.FullName -Force -ErrorAction Stop
                            $entry.deletedFileCount++
                        }
                        Add-Content $logPath "Deleted: $($item.FullName)"
                    } catch {
                        $entry.skippedDeletions++
                        Add-Content $logPath "Failed to delete: $($item.FullName) -> $($_.Exception.Message)"
                    }
                }
            }
        }
    }
}
