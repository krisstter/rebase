
# Start the process
$process = Start-Process -FilePath $ExePath -ArgumentList $arguments -NoNewWindow -PassThru

# Wait for the process to exit
$process.WaitForExit()
Write-Host "Exit Code: $($process.ExitCode)"

# Check if the ExitCode is 0 (successful)
if ($process.ExitCode -eq 0) {
    Write-Host "Process completed successfully."
} else {
    Write-Host "Process failed with exit code $($process.ExitCode)."
}

# Check if the PowerShell automatic $? variable is indicating success
if ($?) {
    Write-Host "PowerShell considers this script successful."
} else {
    Write-Host "PowerShell considers this script a failure."
}


# Check if the executable path is provided
if (-not $ExePath) {
    Write-Host "Executable path is required."
    exit 1  # Exit with failure code if the executable path is not provided
}






# Create a new Process object from .NET's System.Diagnostics.Process
$process = New-Object System.Diagnostics.Process
$process.StartInfo.FileName = $ExePath
$process.StartInfo.Arguments = $arguments
$process.StartInfo.RedirectStandardOutput = $true
$process.StartInfo.RedirectStandardError = $true
$process.StartInfo.UseShellExecute = $false  # Required to redirect output
$process.StartInfo.CreateNoWindow = $true    # Do not create a new window

# Set up event handlers to capture output asynchronously
$process.OutputDataReceived += {
    Write-Host "Output: $($_.Data)"
}

$process.ErrorDataReceived += {
    Write-Host "ERROR: $($_.Data)"
}

try {
    # Start the process
    $process.Start()

    # Begin reading output asynchronously
    $process.BeginOutputReadLine()
    $process.BeginErrorReadLine()

    # Wait for the process to exit
    $process.WaitForExit()

    # Capture the exit code after the process finishes
    $exitCode = $process.ExitCode
    Write-Host "Exit Code: $exitCode"

    # Check if the exit code indicates success or failure
    if ($exitCode -eq 0) {
        Write-Host "Process completed successfully."
    } else {
        Write-Host "Process failed with exit code $exitCode."
    }

    # Return the Process object for further inspection, equivalent to PowerShell's -PassThru
    return $process
}
catch {
    Write-Host "An error occurred: $_"
    exit 1  # Exit with failure code if an error occurs
}
