Get-WebConfigurationProperty -Filter "/system.webServer/handlers/*" -Name . | ConvertTo-Json -Depth 10 | Out-File C:\handler_mappings.json

  $handlers = Get-Content C:\handler_mappings.json | ConvertFrom-Json

foreach ($handler in $handlers) {
    # Check if the handler already exists
    $existingHandler = Get-WebConfigurationProperty -Filter "/system.webServer/handlers/add[@name='$($handler.name)']" -Name name
    
    if ($existingHandler) {
        Write-Host "Handler '$($handler.name)' already exists. Skipping..."
    } else {
        Write-Host "Adding handler: $($handler.name)"
        New-WebHandler -Name $handler.name -Path $handler.path -Verb $handler.verb -Modules $handler.modules -ResourceType $handler.resourceType
    }
}


appcmd add backup BeforeHandlersReset

param (
    [Parameter(Mandatory=$true)]
    [string]$JsonPath
)

Import-Module WebAdministration

if (-Not (Test-Path $JsonPath)) {
    Write-Error "File not found: $JsonPath"
    exit 1
}

# Clear all existing handler mappings
Write-Host "Removing all existing handler mappings..."
Remove-WebConfigurationProperty -Filter "/system.webServer/handlers" -Name "." -AtElement @{ }

# Load new handler mappings
$handlers = Get-Content $JsonPath | ConvertFrom-Json

foreach ($handler in $handlers) {
    if (-not $handler.name) {
        Write-Warning "Skipping handler with missing name."
        continue
    }

    Write-Host "Adding handler: $($handler.name)"

    $params = @{
        Name           = $handler.name
        Path           = $handler.path
        Verb           = $handler.verb
        Modules        = $handler.modules
        ResourceType   = $handler.resourceType
        ScriptProcessor= $handler.scriptProcessor
        Type           = $handler.type
        PreCondition   = $handler.preCondition
    }

    # Remove null or empty parameters
    $cleanParams = @{}
    foreach ($key in $params.Keys) {
        if ($params[$key]) {
            $cleanParams[$key] = $params[$key]
        }
    }

    try {
        New-WebHandler @cleanParams
    }
    catch {
        Write-Error "Failed to add handler '$($handler.name)': $_"
    }
}

#######################
new
##############
$appHostPath = "$env:SystemRoot\\System32\\inetsrv\\config\\applicationHost.config"

[xml]$config = Get-Content $appHostPath

# Use SelectSingleNode with namespace manager
$namespaceManager = New-Object System.Xml.XmlNamespaceManager($config.NameTable)
$namespaceManager.AddNamespace("ns", "urn:schemas-microsoft-com:xml:Configuation")

# Select the handlers node (bypass namespace issues by brute-forcing path)
$handlers = $config.SelectSingleNode("//system.webServer/handlers")

if (-not $handlers) {
    Write-Error "Could not find <handlers> section."
    exit 1
}

# Create new XML document
$exportDoc = New-Object xml
$root = $exportDoc.CreateElement("handlersExport")
$exportDoc.AppendChild($root) | Out-Null

foreach ($node in $handlers.ChildNodes) {
    $importedNode = $exportDoc.ImportNode($node, $true)
    $root.AppendChild($importedNode) | Out-Null
}

$exportDoc.Save("C:\\handler_mappings.xml")
Write-Host "Export complete: C:\\handler_mappings.xml"

##########
Import-Module WebAdministration

# Load XML
[xml]$importDoc = Get-Content "C:\\handler_mappings.xml"
$handlerNodes = $importDoc.handlersExport.ChildNodes

# Clear existing handler mappings
Remove-WebConfigurationProperty -Filter "/system.webServer/handlers" -Name "." -AtElement @{}

# Import each handler
foreach ($node in $handlerNodes) {
    $attributes = @{}

    foreach ($attr in $node.Attributes) {
        $attributes[$attr.Name] = $attr.Value
    }

    New-WebHandler @attributes
}

